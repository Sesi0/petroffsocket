{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","library","add","faSmileBeam","faFrown","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","buttonColor","buttonIcon","refreshSeconds","onButoonClick","bind","assertThisInitialized","changeSeconds","setInterval","componentDidMount","_this2","fetch","then","response","json","data","setState","value","_this3","react_default","a","createElement","className","Card","CardBody","CardImg","top","width","src","logo","alt","CardTitle","Button","size","block","color","toString","onClick","index_es","icon","Input","type","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mVCQxCC,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,SA6CGC,cA1Cb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,YAAc,UAAWC,WAAa,aAAcC,eAAgB,GAEnFV,EAAKW,cAAgBX,EAAKW,cAAcC,KAAnBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACrBA,EAAKc,cAAgBd,EAAKc,cAAcF,KAAnBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACrBe,YAAY,kBAAMf,EAAKgB,qBAAqBhB,EAAKO,MAAMG,eAAiB,EAAiC,IAA5BV,EAAKO,MAAMG,eAAyB,KAN/FV,mFASA,IAAAiB,EAAAd,KAClBe,MAAM,0DACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIL,EAAKM,SAAS,CAACf,YAAqB,IAATc,EAAa,SAAW,UAAWb,WAAoB,IAATa,EAAa,QAAU,uDAGpG7B,GACZU,KAAKoB,SAAS,CAACb,eAAejB,EAAE+B,gDAIhCN,MAAM,sDACNf,KAAKa,qDAGE,IAAAS,EAAAtB,KACP,OACEuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACAL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASC,KAAG,EAACC,MAAM,OAAOC,IAAKC,IAAMC,IAAI,mBACvCX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAWT,UAAU,gBAArB,eACAH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQC,KAAK,KAAKC,OAAK,EAACC,MAAOvC,KAAKI,MAAMC,YAAYmC,WAAaC,QAAS,kBAAMnB,EAAKd,kBAAkBe,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAiBC,KAAM3C,KAAKI,MAAME,cAAuB,MAI5KiB,EAAAC,EAAAC,cAAA,0NACAF,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,KAAK,SAAUxB,MAAOrB,KAAKI,MAAMG,eAAgBuC,SAAU,SAACxD,GAAD,OAAOgC,EAAKX,cAAcrB,cArC5EyD,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.6f3a975a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cbfc45e5.png\";","import React, { Component } from 'react';\nimport {  Input, Card, CardBody, CardTitle,CardImg, Button } from 'reactstrap';\nimport './App.css';\nimport logo from './logo.png'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSmileBeam, faFrown } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faSmileBeam)\nlibrary.add(faFrown)\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = { buttonColor : \"primary\", buttonIcon : \"smile-beam\", refreshSeconds: 5 };\n\n    this.onButoonClick = this.onButoonClick.bind(this);\n    this.changeSeconds = this.changeSeconds.bind(this);\n    setInterval(() => this.componentDidMount(), this.state.refreshSeconds > 0 ? (this.state.refreshSeconds * 1000) : 5 * 10000);\n  }\n\n  componentDidMount() {\n    fetch('http://91.139.144.143:7878/api/v1/SmartPlug/CheckState')\n      .then(response => response.json())\n      .then(data => this.setState({buttonColor:data === 0 ? 'danger' : 'primary', buttonIcon:data === 0 ? 'frown' : 'smile-beam'}));\n  }\n\n  changeSeconds(p){\n    this.setState({refreshSeconds:p.value})\n  }\n\n  onButoonClick() {\n    fetch('http://91.139.144.143:7878/api/v1/SmartPlug/switch');\n    this.componentDidMount();\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Card>\n          <CardBody>\n          <CardImg top width=\"100%\" src={logo} alt=\"Card image cap\" />\n            <CardTitle className=\"text-success\">SmartSocket</CardTitle>\n            <Button size=\"lg\" block color={this.state.buttonColor.toString()}  onClick={() => this.onButoonClick() }><FontAwesomeIcon icon={this.state.buttonIcon}/></Button>{' '}\n          </CardBody>\n        </Card>\n\n  <p>Задайте на колко секунди да се обновява:</p>\n  <Input type=\"number\"  value={this.state.refreshSeconds} onChange={(p) => this.changeSeconds(p)}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}